// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculator/calculatorpb/calculator.proto

package calculatorpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AdditionElements struct {
	Elements             []int64  `protobuf:"varint,1,rep,packed,name=elements,proto3" json:"elements,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdditionElements) Reset()         { *m = AdditionElements{} }
func (m *AdditionElements) String() string { return proto.CompactTextString(m) }
func (*AdditionElements) ProtoMessage()    {}
func (*AdditionElements) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f42938f8c8365cf, []int{0}
}

func (m *AdditionElements) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdditionElements.Unmarshal(m, b)
}
func (m *AdditionElements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdditionElements.Marshal(b, m, deterministic)
}
func (m *AdditionElements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdditionElements.Merge(m, src)
}
func (m *AdditionElements) XXX_Size() int {
	return xxx_messageInfo_AdditionElements.Size(m)
}
func (m *AdditionElements) XXX_DiscardUnknown() {
	xxx_messageInfo_AdditionElements.DiscardUnknown(m)
}

var xxx_messageInfo_AdditionElements proto.InternalMessageInfo

func (m *AdditionElements) GetElements() []int64 {
	if m != nil {
		return m.Elements
	}
	return nil
}

type SumRequest struct {
	SumElements          *AdditionElements `protobuf:"bytes,1,opt,name=sum_elements,json=sumElements,proto3" json:"sum_elements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SumRequest) Reset()         { *m = SumRequest{} }
func (m *SumRequest) String() string { return proto.CompactTextString(m) }
func (*SumRequest) ProtoMessage()    {}
func (*SumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f42938f8c8365cf, []int{1}
}

func (m *SumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumRequest.Unmarshal(m, b)
}
func (m *SumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumRequest.Marshal(b, m, deterministic)
}
func (m *SumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumRequest.Merge(m, src)
}
func (m *SumRequest) XXX_Size() int {
	return xxx_messageInfo_SumRequest.Size(m)
}
func (m *SumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SumRequest proto.InternalMessageInfo

func (m *SumRequest) GetSumElements() *AdditionElements {
	if m != nil {
		return m.SumElements
	}
	return nil
}

type SumResponse struct {
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumResponse) Reset()         { *m = SumResponse{} }
func (m *SumResponse) String() string { return proto.CompactTextString(m) }
func (*SumResponse) ProtoMessage()    {}
func (*SumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f42938f8c8365cf, []int{2}
}

func (m *SumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumResponse.Unmarshal(m, b)
}
func (m *SumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumResponse.Marshal(b, m, deterministic)
}
func (m *SumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumResponse.Merge(m, src)
}
func (m *SumResponse) XXX_Size() int {
	return xxx_messageInfo_SumResponse.Size(m)
}
func (m *SumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SumResponse proto.InternalMessageInfo

func (m *SumResponse) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type PNDRequest struct {
	Request              int64    `protobuf:"varint,1,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PNDRequest) Reset()         { *m = PNDRequest{} }
func (m *PNDRequest) String() string { return proto.CompactTextString(m) }
func (*PNDRequest) ProtoMessage()    {}
func (*PNDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f42938f8c8365cf, []int{3}
}

func (m *PNDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PNDRequest.Unmarshal(m, b)
}
func (m *PNDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PNDRequest.Marshal(b, m, deterministic)
}
func (m *PNDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PNDRequest.Merge(m, src)
}
func (m *PNDRequest) XXX_Size() int {
	return xxx_messageInfo_PNDRequest.Size(m)
}
func (m *PNDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PNDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PNDRequest proto.InternalMessageInfo

func (m *PNDRequest) GetRequest() int64 {
	if m != nil {
		return m.Request
	}
	return 0
}

type PNDResponse struct {
	Response             int64    `protobuf:"varint,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PNDResponse) Reset()         { *m = PNDResponse{} }
func (m *PNDResponse) String() string { return proto.CompactTextString(m) }
func (*PNDResponse) ProtoMessage()    {}
func (*PNDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f42938f8c8365cf, []int{4}
}

func (m *PNDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PNDResponse.Unmarshal(m, b)
}
func (m *PNDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PNDResponse.Marshal(b, m, deterministic)
}
func (m *PNDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PNDResponse.Merge(m, src)
}
func (m *PNDResponse) XXX_Size() int {
	return xxx_messageInfo_PNDResponse.Size(m)
}
func (m *PNDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PNDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PNDResponse proto.InternalMessageInfo

func (m *PNDResponse) GetResponse() int64 {
	if m != nil {
		return m.Response
	}
	return 0
}

type ComputeAverageRequest struct {
	Request              int64    `protobuf:"varint,1,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeAverageRequest) Reset()         { *m = ComputeAverageRequest{} }
func (m *ComputeAverageRequest) String() string { return proto.CompactTextString(m) }
func (*ComputeAverageRequest) ProtoMessage()    {}
func (*ComputeAverageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f42938f8c8365cf, []int{5}
}

func (m *ComputeAverageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeAverageRequest.Unmarshal(m, b)
}
func (m *ComputeAverageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeAverageRequest.Marshal(b, m, deterministic)
}
func (m *ComputeAverageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeAverageRequest.Merge(m, src)
}
func (m *ComputeAverageRequest) XXX_Size() int {
	return xxx_messageInfo_ComputeAverageRequest.Size(m)
}
func (m *ComputeAverageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeAverageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeAverageRequest proto.InternalMessageInfo

func (m *ComputeAverageRequest) GetRequest() int64 {
	if m != nil {
		return m.Request
	}
	return 0
}

type ComputeAverageResponse struct {
	Average              float64  `protobuf:"fixed64,1,opt,name=average,proto3" json:"average,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeAverageResponse) Reset()         { *m = ComputeAverageResponse{} }
func (m *ComputeAverageResponse) String() string { return proto.CompactTextString(m) }
func (*ComputeAverageResponse) ProtoMessage()    {}
func (*ComputeAverageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f42938f8c8365cf, []int{6}
}

func (m *ComputeAverageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeAverageResponse.Unmarshal(m, b)
}
func (m *ComputeAverageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeAverageResponse.Marshal(b, m, deterministic)
}
func (m *ComputeAverageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeAverageResponse.Merge(m, src)
}
func (m *ComputeAverageResponse) XXX_Size() int {
	return xxx_messageInfo_ComputeAverageResponse.Size(m)
}
func (m *ComputeAverageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeAverageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeAverageResponse proto.InternalMessageInfo

func (m *ComputeAverageResponse) GetAverage() float64 {
	if m != nil {
		return m.Average
	}
	return 0
}

type FindMaximumRequest struct {
	Number               int64    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMaximumRequest) Reset()         { *m = FindMaximumRequest{} }
func (m *FindMaximumRequest) String() string { return proto.CompactTextString(m) }
func (*FindMaximumRequest) ProtoMessage()    {}
func (*FindMaximumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f42938f8c8365cf, []int{7}
}

func (m *FindMaximumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMaximumRequest.Unmarshal(m, b)
}
func (m *FindMaximumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMaximumRequest.Marshal(b, m, deterministic)
}
func (m *FindMaximumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMaximumRequest.Merge(m, src)
}
func (m *FindMaximumRequest) XXX_Size() int {
	return xxx_messageInfo_FindMaximumRequest.Size(m)
}
func (m *FindMaximumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMaximumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindMaximumRequest proto.InternalMessageInfo

func (m *FindMaximumRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type FindMaximumResponse struct {
	CurrentMax           int64    `protobuf:"varint,1,opt,name=current_max,json=currentMax,proto3" json:"current_max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMaximumResponse) Reset()         { *m = FindMaximumResponse{} }
func (m *FindMaximumResponse) String() string { return proto.CompactTextString(m) }
func (*FindMaximumResponse) ProtoMessage()    {}
func (*FindMaximumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f42938f8c8365cf, []int{8}
}

func (m *FindMaximumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMaximumResponse.Unmarshal(m, b)
}
func (m *FindMaximumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMaximumResponse.Marshal(b, m, deterministic)
}
func (m *FindMaximumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMaximumResponse.Merge(m, src)
}
func (m *FindMaximumResponse) XXX_Size() int {
	return xxx_messageInfo_FindMaximumResponse.Size(m)
}
func (m *FindMaximumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMaximumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindMaximumResponse proto.InternalMessageInfo

func (m *FindMaximumResponse) GetCurrentMax() int64 {
	if m != nil {
		return m.CurrentMax
	}
	return 0
}

type SquareRootRequest struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SquareRootRequest) Reset()         { *m = SquareRootRequest{} }
func (m *SquareRootRequest) String() string { return proto.CompactTextString(m) }
func (*SquareRootRequest) ProtoMessage()    {}
func (*SquareRootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f42938f8c8365cf, []int{9}
}

func (m *SquareRootRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SquareRootRequest.Unmarshal(m, b)
}
func (m *SquareRootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SquareRootRequest.Marshal(b, m, deterministic)
}
func (m *SquareRootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareRootRequest.Merge(m, src)
}
func (m *SquareRootRequest) XXX_Size() int {
	return xxx_messageInfo_SquareRootRequest.Size(m)
}
func (m *SquareRootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareRootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SquareRootRequest proto.InternalMessageInfo

func (m *SquareRootRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type SquareRootResponse struct {
	NumberRoot           float64  `protobuf:"fixed64,1,opt,name=number_root,json=numberRoot,proto3" json:"number_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SquareRootResponse) Reset()         { *m = SquareRootResponse{} }
func (m *SquareRootResponse) String() string { return proto.CompactTextString(m) }
func (*SquareRootResponse) ProtoMessage()    {}
func (*SquareRootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f42938f8c8365cf, []int{10}
}

func (m *SquareRootResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SquareRootResponse.Unmarshal(m, b)
}
func (m *SquareRootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SquareRootResponse.Marshal(b, m, deterministic)
}
func (m *SquareRootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareRootResponse.Merge(m, src)
}
func (m *SquareRootResponse) XXX_Size() int {
	return xxx_messageInfo_SquareRootResponse.Size(m)
}
func (m *SquareRootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareRootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SquareRootResponse proto.InternalMessageInfo

func (m *SquareRootResponse) GetNumberRoot() float64 {
	if m != nil {
		return m.NumberRoot
	}
	return 0
}

func init() {
	proto.RegisterType((*AdditionElements)(nil), "calculator.AdditionElements")
	proto.RegisterType((*SumRequest)(nil), "calculator.SumRequest")
	proto.RegisterType((*SumResponse)(nil), "calculator.SumResponse")
	proto.RegisterType((*PNDRequest)(nil), "calculator.PNDRequest")
	proto.RegisterType((*PNDResponse)(nil), "calculator.PNDResponse")
	proto.RegisterType((*ComputeAverageRequest)(nil), "calculator.ComputeAverageRequest")
	proto.RegisterType((*ComputeAverageResponse)(nil), "calculator.ComputeAverageResponse")
	proto.RegisterType((*FindMaximumRequest)(nil), "calculator.FindMaximumRequest")
	proto.RegisterType((*FindMaximumResponse)(nil), "calculator.FindMaximumResponse")
	proto.RegisterType((*SquareRootRequest)(nil), "calculator.SquareRootRequest")
	proto.RegisterType((*SquareRootResponse)(nil), "calculator.SquareRootResponse")
}

func init() {
	proto.RegisterFile("calculator/calculatorpb/calculator.proto", fileDescriptor_7f42938f8c8365cf)
}

var fileDescriptor_7f42938f8c8365cf = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0xdd, 0x10, 0xec, 0x2e, 0x37, 0xcb, 0xa2, 0x23, 0xc6, 0x10, 0x74, 0xab, 0x03, 0x4a, 0x44,
	0xa9, 0xb5, 0xa2, 0xf8, 0x26, 0xb5, 0xd5, 0xb7, 0xd6, 0x92, 0xfa, 0xa4, 0x0f, 0x65, 0x9a, 0x0e,
	0x12, 0xc8, 0x64, 0xd2, 0xf9, 0x90, 0xfe, 0x15, 0xff, 0xad, 0x34, 0x99, 0x24, 0x93, 0x7e, 0xb8,
	0x6f, 0xf7, 0xdc, 0x39, 0xf7, 0x1c, 0x66, 0xce, 0x5c, 0x88, 0x12, 0x92, 0x25, 0x3a, 0x23, 0x8a,
	0x8b, 0xb7, 0x6d, 0x59, 0xac, 0x2d, 0x30, 0x28, 0x04, 0x57, 0x1c, 0x41, 0xdb, 0xc1, 0x03, 0xb8,
	0x3f, 0xde, 0x6c, 0x52, 0x95, 0xf2, 0xfc, 0x6b, 0x46, 0x19, 0xcd, 0x95, 0x44, 0x21, 0x5c, 0x51,
	0x53, 0x07, 0xce, 0x33, 0x37, 0x72, 0xe3, 0x06, 0xe3, 0x19, 0xc0, 0x52, 0xb3, 0x98, 0x6e, 0x35,
	0x95, 0x0a, 0x7d, 0x86, 0x6b, 0xa9, 0xd9, 0xca, 0x62, 0x3b, 0x91, 0x37, 0x7a, 0x32, 0xb0, 0x2c,
	0x0f, 0xd5, 0x63, 0x4f, 0x6a, 0x56, 0x03, 0xfc, 0x02, 0xbc, 0x52, 0x4e, 0x16, 0x3c, 0x97, 0x14,
	0xf9, 0xd0, 0x13, 0x54, 0xea, 0x4c, 0x95, 0x4a, 0x6e, 0x6c, 0x10, 0x7e, 0x09, 0xb0, 0x98, 0x4f,
	0x6b, 0xd7, 0x00, 0x2e, 0x45, 0x55, 0x1a, 0x5a, 0x0d, 0xf1, 0x2b, 0xf0, 0x4a, 0x9e, 0x91, 0x0b,
	0xe1, 0x4a, 0x98, 0xda, 0x30, 0x1b, 0x8c, 0xdf, 0xc1, 0xa3, 0x09, 0x67, 0x85, 0x56, 0x74, 0xfc,
	0x87, 0x0a, 0xf2, 0x9b, 0xde, 0xad, 0x3e, 0x02, 0xff, 0x70, 0xc4, 0x18, 0x05, 0x70, 0x49, 0xaa,
	0x56, 0x39, 0xe3, 0xc4, 0x35, 0xc4, 0x6f, 0x00, 0x7d, 0x4b, 0xf3, 0xcd, 0x8c, 0xec, 0x52, 0xd6,
	0xbe, 0x9b, 0x0f, 0xbd, 0x5c, 0xb3, 0x35, 0x15, 0xf5, 0x3d, 0x2b, 0x84, 0x3f, 0xc2, 0xc3, 0x0e,
	0xdb, 0xc8, 0xf7, 0xc1, 0x4b, 0xb4, 0x10, 0x34, 0x57, 0x2b, 0x46, 0x76, 0x66, 0x06, 0x4c, 0x6b,
	0x46, 0x76, 0xf8, 0x35, 0x3c, 0x58, 0x6e, 0x35, 0x11, 0x34, 0xe6, 0x5c, 0x9d, 0x36, 0xb9, 0xd7,
	0x98, 0x7c, 0x00, 0x64, 0x93, 0x5b, 0x8f, 0xea, 0x7c, 0x25, 0x38, 0x57, 0xe6, 0x1a, 0x50, 0xb5,
	0xf6, 0xc4, 0xd1, 0x5f, 0x17, 0x60, 0xd2, 0xe4, 0x8a, 0x3e, 0x81, 0xbb, 0xd4, 0x0c, 0xf9, 0x76,
	0xd6, 0xed, 0xcf, 0x08, 0x1f, 0x1f, 0xf5, 0xcd, 0xbb, 0x5f, 0xa0, 0xef, 0x10, 0x2c, 0x44, 0xca,
	0xe8, 0xbc, 0xd4, 0x9e, 0xd2, 0x84, 0xb3, 0x82, 0xcb, 0xf2, 0x93, 0x74, 0xe5, 0xda, 0xc8, 0xbb,
	0x72, 0x56, 0xc4, 0xf8, 0x62, 0xe8, 0xa0, 0x5f, 0x70, 0xd3, 0xcd, 0x05, 0x3d, 0xb7, 0xe9, 0x27,
	0x63, 0x0e, 0xf1, 0xff, 0x28, 0xb5, 0x78, 0xe4, 0xa0, 0x1f, 0xe0, 0x59, 0x91, 0xa0, 0x5b, 0x7b,
	0xec, 0x38, 0xd9, 0xb0, 0x7f, 0xf6, 0xbc, 0xd5, 0x1c, 0x3a, 0x68, 0xbf, 0x46, 0x4d, 0x06, 0xe8,
	0x69, 0xe7, 0xb1, 0x0e, 0x83, 0x0c, 0x6f, 0xcf, 0x1d, 0xd7, 0x92, 0x5f, 0x6e, 0x7e, 0x5e, 0xdb,
	0x2b, 0xbf, 0xee, 0x95, 0x8b, 0xfe, 0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8d, 0x77, 0x2c,
	0xe5, 0x14, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorClient interface {
	// Unary
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	// Streaming server
	PrimeNumberDecomposition(ctx context.Context, in *PNDRequest, opts ...grpc.CallOption) (Calculator_PrimeNumberDecompositionClient, error)
	// Streaming client
	ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (Calculator_ComputeAverageClient, error)
	// BiDi
	FindMaximum(ctx context.Context, opts ...grpc.CallOption) (Calculator_FindMaximumClient, error)
	// Unary, testing gRPC errors
	// send an error if the number sent is negative
	// Error being sent is of type INVALID_ARGUMENT
	SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error)
}

type calculatorClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorClient(cc *grpc.ClientConn) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) PrimeNumberDecomposition(ctx context.Context, in *PNDRequest, opts ...grpc.CallOption) (Calculator_PrimeNumberDecompositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[0], "/calculator.Calculator/PrimeNumberDecomposition", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorPrimeNumberDecompositionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Calculator_PrimeNumberDecompositionClient interface {
	Recv() (*PNDResponse, error)
	grpc.ClientStream
}

type calculatorPrimeNumberDecompositionClient struct {
	grpc.ClientStream
}

func (x *calculatorPrimeNumberDecompositionClient) Recv() (*PNDResponse, error) {
	m := new(PNDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (Calculator_ComputeAverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[1], "/calculator.Calculator/ComputeAverage", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorComputeAverageClient{stream}
	return x, nil
}

type Calculator_ComputeAverageClient interface {
	Send(*ComputeAverageRequest) error
	CloseAndRecv() (*ComputeAverageResponse, error)
	grpc.ClientStream
}

type calculatorComputeAverageClient struct {
	grpc.ClientStream
}

func (x *calculatorComputeAverageClient) Send(m *ComputeAverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorComputeAverageClient) CloseAndRecv() (*ComputeAverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ComputeAverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) FindMaximum(ctx context.Context, opts ...grpc.CallOption) (Calculator_FindMaximumClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[2], "/calculator.Calculator/FindMaximum", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorFindMaximumClient{stream}
	return x, nil
}

type Calculator_FindMaximumClient interface {
	Send(*FindMaximumRequest) error
	Recv() (*FindMaximumResponse, error)
	grpc.ClientStream
}

type calculatorFindMaximumClient struct {
	grpc.ClientStream
}

func (x *calculatorFindMaximumClient) Send(m *FindMaximumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorFindMaximumClient) Recv() (*FindMaximumResponse, error) {
	m := new(FindMaximumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error) {
	out := new(SquareRootResponse)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/SquareRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServer is the server API for Calculator service.
type CalculatorServer interface {
	// Unary
	Sum(context.Context, *SumRequest) (*SumResponse, error)
	// Streaming server
	PrimeNumberDecomposition(*PNDRequest, Calculator_PrimeNumberDecompositionServer) error
	// Streaming client
	ComputeAverage(Calculator_ComputeAverageServer) error
	// BiDi
	FindMaximum(Calculator_FindMaximumServer) error
	// Unary, testing gRPC errors
	// send an error if the number sent is negative
	// Error being sent is of type INVALID_ARGUMENT
	SquareRoot(context.Context, *SquareRootRequest) (*SquareRootResponse, error)
}

// UnimplementedCalculatorServer can be embedded to have forward compatible implementations.
type UnimplementedCalculatorServer struct {
}

func (*UnimplementedCalculatorServer) Sum(ctx context.Context, req *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (*UnimplementedCalculatorServer) PrimeNumberDecomposition(req *PNDRequest, srv Calculator_PrimeNumberDecompositionServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeNumberDecomposition not implemented")
}
func (*UnimplementedCalculatorServer) ComputeAverage(srv Calculator_ComputeAverageServer) error {
	return status.Errorf(codes.Unimplemented, "method ComputeAverage not implemented")
}
func (*UnimplementedCalculatorServer) FindMaximum(srv Calculator_FindMaximumServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMaximum not implemented")
}
func (*UnimplementedCalculatorServer) SquareRoot(ctx context.Context, req *SquareRootRequest) (*SquareRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SquareRoot not implemented")
}

func RegisterCalculatorServer(s *grpc.Server, srv CalculatorServer) {
	s.RegisterService(&_Calculator_serviceDesc, srv)
}

func _Calculator_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_PrimeNumberDecomposition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PNDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServer).PrimeNumberDecomposition(m, &calculatorPrimeNumberDecompositionServer{stream})
}

type Calculator_PrimeNumberDecompositionServer interface {
	Send(*PNDResponse) error
	grpc.ServerStream
}

type calculatorPrimeNumberDecompositionServer struct {
	grpc.ServerStream
}

func (x *calculatorPrimeNumberDecompositionServer) Send(m *PNDResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Calculator_ComputeAverage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).ComputeAverage(&calculatorComputeAverageServer{stream})
}

type Calculator_ComputeAverageServer interface {
	SendAndClose(*ComputeAverageResponse) error
	Recv() (*ComputeAverageRequest, error)
	grpc.ServerStream
}

type calculatorComputeAverageServer struct {
	grpc.ServerStream
}

func (x *calculatorComputeAverageServer) SendAndClose(m *ComputeAverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorComputeAverageServer) Recv() (*ComputeAverageRequest, error) {
	m := new(ComputeAverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Calculator_FindMaximum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).FindMaximum(&calculatorFindMaximumServer{stream})
}

type Calculator_FindMaximumServer interface {
	Send(*FindMaximumResponse) error
	Recv() (*FindMaximumRequest, error)
	grpc.ServerStream
}

type calculatorFindMaximumServer struct {
	grpc.ServerStream
}

func (x *calculatorFindMaximumServer) Send(m *FindMaximumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorFindMaximumServer) Recv() (*FindMaximumRequest, error) {
	m := new(FindMaximumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Calculator_SquareRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquareRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).SquareRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/SquareRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).SquareRoot(ctx, req.(*SquareRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _Calculator_Sum_Handler,
		},
		{
			MethodName: "SquareRoot",
			Handler:    _Calculator_SquareRoot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeNumberDecomposition",
			Handler:       _Calculator_PrimeNumberDecomposition_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ComputeAverage",
			Handler:       _Calculator_ComputeAverage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindMaximum",
			Handler:       _Calculator_FindMaximum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator/calculatorpb/calculator.proto",
}
